
Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000280e  00002882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001efc  00000000  00000000  000028e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0e  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000054ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000562e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000073e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000082d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000946d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ee 10 	call	0x21dc	; 0x21dc <main>
      7a:	0c 94 05 14 	jmp	0x280a	; 0x280a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 ea       	ldi	r26, 0xA9	; 169
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 ea       	ldi	r24, 0xA9	; 169
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
#include "DIO_Config.h"



void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_voidSetPinDirection+0x22>
     b56:	f6 c0       	rjmp	.+492    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_voidSetPinDirection+0x2a>
     b5e:	f2 c0       	rjmp	.+484    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	39 87       	std	Y+9, r19	; 0x09
     b68:	28 87       	std	Y+8, r18	; 0x08
     b6a:	88 85       	ldd	r24, Y+8	; 0x08
     b6c:	99 85       	ldd	r25, Y+9	; 0x09
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	39 f0       	breq	.+14     	; 0xb80 <DIO_voidSetPinDirection+0x4a>
     b72:	28 85       	ldd	r18, Y+8	; 0x08
     b74:	39 85       	ldd	r19, Y+9	; 0x09
     b76:	21 30       	cpi	r18, 0x01	; 1
     b78:	31 05       	cpc	r19, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <DIO_voidSetPinDirection+0x48>
     b7c:	75 c0       	rjmp	.+234    	; 0xc68 <DIO_voidSetPinDirection+0x132>
     b7e:	e2 c0       	rjmp	.+452    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3f 83       	std	Y+7, r19	; 0x07
     b88:	2e 83       	std	Y+6, r18	; 0x06
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	59 f1       	breq	.+86     	; 0xbea <DIO_voidSetPinDirection+0xb4>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f4       	brge	.+10     	; 0xba8 <DIO_voidSetPinDirection+0x72>
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	69 f0       	breq	.+26     	; 0xbc0 <DIO_voidSetPinDirection+0x8a>
     ba6:	ce c0       	rjmp	.+412    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     ba8:	2e 81       	ldd	r18, Y+6	; 0x06
     baa:	3f 81       	ldd	r19, Y+7	; 0x07
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	89 f1       	breq	.+98     	; 0xc14 <DIO_voidSetPinDirection+0xde>
     bb2:	8e 81       	ldd	r24, Y+6	; 0x06
     bb4:	9f 81       	ldd	r25, Y+7	; 0x07
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_voidSetPinDirection+0x88>
     bbc:	40 c0       	rjmp	.+128    	; 0xc3e <DIO_voidSetPinDirection+0x108>
     bbe:	c2 c0       	rjmp	.+388    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
     bc0:	aa e3       	ldi	r26, 0x3A	; 58
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ea e3       	ldi	r30, 0x3A	; 58
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_voidSetPinDirection+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_voidSetPinDirection+0xa4>
     be2:	80 95       	com	r24
     be4:	84 23       	and	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	ad c0       	rjmp	.+346    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    CLR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
     bea:	a7 e3       	ldi	r26, 0x37	; 55
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e3       	ldi	r30, 0x37	; 55
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_voidSetPinDirection+0xd2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_voidSetPinDirection+0xce>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	98 c0       	rjmp	.+304    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    CLR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
     c14:	a4 e3       	ldi	r26, 0x34	; 52
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e4 e3       	ldi	r30, 0x34	; 52
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_voidSetPinDirection+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_voidSetPinDirection+0xf8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	83 c0       	rjmp	.+262    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    CLR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
     c3e:	a1 e3       	ldi	r26, 0x31	; 49
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e1 e3       	ldi	r30, 0x31	; 49
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_voidSetPinDirection+0x126>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_voidSetPinDirection+0x122>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	6e c0       	rjmp	.+220    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3d 83       	std	Y+5, r19	; 0x05
     c70:	2c 83       	std	Y+4, r18	; 0x04
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_voidSetPinDirection+0x198>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_voidSetPinDirection+0x15a>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_voidSetPinDirection+0x170>
     c8e:	5a c0       	rjmp	.+180    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     c90:	2c 81       	ldd	r18, Y+4	; 0x04
     c92:	3d 81       	ldd	r19, Y+5	; 0x05
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_voidSetPinDirection+0x1c0>
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_voidSetPinDirection+0x1e8>
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_voidSetPinDirection+0x18e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_voidSetPinDirection+0x18a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	3b c0       	rjmp	.+118    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_voidSetPinDirection+0x1b6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_voidSetPinDirection+0x1b2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_voidSetPinDirection+0x1de>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_voidSetPinDirection+0x1da>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_voidSetPinDirection+0x206>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_voidSetPinDirection+0x202>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
     d44:	29 96       	adiw	r28, 0x09	; 9
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	28 97       	sbiw	r28, 0x08	; 8
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_voidSetPortDirection+0x20>
     d74:	70 c0       	rjmp	.+224    	; 0xe56 <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	38 87       	std	Y+8, r19	; 0x08
     d7e:	2f 83       	std	Y+7, r18	; 0x07
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	31 f0       	breq	.+12     	; 0xd94 <DIO_voidSetPortDirection+0x3e>
     d88:	2f 81       	ldd	r18, Y+7	; 0x07
     d8a:	38 85       	ldd	r19, Y+8	; 0x08
     d8c:	21 30       	cpi	r18, 0x01	; 1
     d8e:	31 05       	cpc	r19, r1
     d90:	81 f1       	breq	.+96     	; 0xdf2 <DIO_voidSetPortDirection+0x9c>
     d92:	61 c0       	rjmp	.+194    	; 0xe56 <DIO_voidSetPortDirection+0x100>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	c9 f0       	breq	.+50     	; 0xdda <DIO_voidSetPortDirection+0x84>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <DIO_voidSetPortDirection+0x66>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	61 f0       	breq	.+24     	; 0xdd2 <DIO_voidSetPortDirection+0x7c>
     dba:	4d c0       	rjmp	.+154    	; 0xe56 <DIO_voidSetPortDirection+0x100>
     dbc:	2d 81       	ldd	r18, Y+5	; 0x05
     dbe:	3e 81       	ldd	r19, Y+6	; 0x06
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	71 f0       	breq	.+28     	; 0xde2 <DIO_voidSetPortDirection+0x8c>
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	69 f0       	breq	.+26     	; 0xdea <DIO_voidSetPortDirection+0x94>
     dd0:	42 c0       	rjmp	.+132    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0x00 ;   break;
     dd2:	ea e3       	ldi	r30, 0x3A	; 58
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	10 82       	st	Z, r1
     dd8:	3e c0       	rjmp	.+124    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0x00 ;   break;
     dda:	e7 e3       	ldi	r30, 0x37	; 55
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	10 82       	st	Z, r1
     de0:	3a c0       	rjmp	.+116    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0x00 ;   break;
     de2:	e4 e3       	ldi	r30, 0x34	; 52
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	10 82       	st	Z, r1
     de8:	36 c0       	rjmp	.+108    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0x00 ;   break;
     dea:	e1 e3       	ldi	r30, 0x31	; 49
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	10 82       	st	Z, r1
     df0:	32 c0       	rjmp	.+100    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3c 83       	std	Y+4, r19	; 0x04
     dfa:	2b 83       	std	Y+3, r18	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	d1 f0       	breq	.+52     	; 0xe3a <DIO_voidSetPortDirection+0xe4>
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <DIO_voidSetPortDirection+0xc4>
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <DIO_voidSetPortDirection+0xda>
     e18:	1e c0       	rjmp	.+60     	; 0xe56 <DIO_voidSetPortDirection+0x100>
     e1a:	2b 81       	ldd	r18, Y+3	; 0x03
     e1c:	3c 81       	ldd	r19, Y+4	; 0x04
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	81 f0       	breq	.+32     	; 0xe44 <DIO_voidSetPortDirection+0xee>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	81 f0       	breq	.+32     	; 0xe4e <DIO_voidSetPortDirection+0xf8>
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0xff ;   break;
     e30:	ea e3       	ldi	r30, 0x3A	; 58
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 83       	st	Z, r24
     e38:	0e c0       	rjmp	.+28     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0xff ;   break;
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	80 83       	st	Z, r24
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0xff ;   break;
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	80 83       	st	Z, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0xff ;   break;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
     e56:	28 96       	adiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DIO_voidSetWithValuePortDirection>:
void DIO_voidSetWithValuePortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_voidSetWithValuePortDirection+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_voidSetWithValuePortDirection+0x8>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	90 f5       	brcc	.+100    	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
    {
        // Do Nothing
    }
    else
    {
            switch(Copy_u8PortNumber)
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	3c 83       	std	Y+4, r19	; 0x04
     e86:	2b 83       	std	Y+3, r18	; 0x03
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	d1 f0       	breq	.+52     	; 0xec6 <DIO_voidSetWithValuePortDirection+0x5e>
     e92:	2b 81       	ldd	r18, Y+3	; 0x03
     e94:	3c 81       	ldd	r19, Y+4	; 0x04
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	2c f4       	brge	.+10     	; 0xea6 <DIO_voidSetWithValuePortDirection+0x3e>
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	61 f0       	breq	.+24     	; 0xebc <DIO_voidSetWithValuePortDirection+0x54>
     ea4:	1e c0       	rjmp	.+60     	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	3c 81       	ldd	r19, Y+4	; 0x04
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	81 f0       	breq	.+32     	; 0xed0 <DIO_voidSetWithValuePortDirection+0x68>
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	81 f0       	breq	.+32     	; 0xeda <DIO_voidSetWithValuePortDirection+0x72>
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
				{
					case DIO_PORTA :    DDRA_REG = Copy_u8Value ;   break;
     ebc:	ea e3       	ldi	r30, 0x3A	; 58
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 83       	st	Z, r24
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTB :    DDRB_REG = Copy_u8Value ;   break;
     ec6:	e7 e3       	ldi	r30, 0x37	; 55
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 83       	st	Z, r24
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTC :    DDRC_REG = Copy_u8Value ;   break;
     ed0:	e4 e3       	ldi	r30, 0x34	; 52
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTD :    DDRD_REG = Copy_u8Value ;   break;
     eda:	e1 e3       	ldi	r30, 0x31	; 49
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	80 83       	st	Z, r24
					default    :                        break;
				}

    }
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	29 97       	sbiw	r28, 0x09	; 9
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	6a 83       	std	Y+2, r22	; 0x02
     f08:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <DIO_voidSetPinValue+0x22>
     f10:	f6 c0       	rjmp	.+492    	; 0x10fe <DIO_voidSetPinValue+0x20e>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	08 f0       	brcs	.+2      	; 0xf1a <DIO_voidSetPinValue+0x2a>
     f18:	f2 c0       	rjmp	.+484    	; 0x10fe <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	39 87       	std	Y+9, r19	; 0x09
     f22:	28 87       	std	Y+8, r18	; 0x08
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	39 f0       	breq	.+14     	; 0xf3a <DIO_voidSetPinValue+0x4a>
     f2c:	28 85       	ldd	r18, Y+8	; 0x08
     f2e:	39 85       	ldd	r19, Y+9	; 0x09
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <DIO_voidSetPinValue+0x48>
     f36:	75 c0       	rjmp	.+234    	; 0x1022 <DIO_voidSetPinValue+0x132>
     f38:	e2 c0       	rjmp	.+452    	; 0x10fe <DIO_voidSetPinValue+0x20e>
        {
            case DIO_LOW :    switch(Copy_u8PortNumber)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3f 83       	std	Y+7, r19	; 0x07
     f42:	2e 83       	std	Y+6, r18	; 0x06
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	9f 81       	ldd	r25, Y+7	; 0x07
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	59 f1       	breq	.+86     	; 0xfa4 <DIO_voidSetPinValue+0xb4>
     f4e:	2e 81       	ldd	r18, Y+6	; 0x06
     f50:	3f 81       	ldd	r19, Y+7	; 0x07
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	2c f4       	brge	.+10     	; 0xf62 <DIO_voidSetPinValue+0x72>
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	9f 81       	ldd	r25, Y+7	; 0x07
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	69 f0       	breq	.+26     	; 0xf7a <DIO_voidSetPinValue+0x8a>
     f60:	ce c0       	rjmp	.+412    	; 0x10fe <DIO_voidSetPinValue+0x20e>
     f62:	2e 81       	ldd	r18, Y+6	; 0x06
     f64:	3f 81       	ldd	r19, Y+7	; 0x07
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	89 f1       	breq	.+98     	; 0xfce <DIO_voidSetPinValue+0xde>
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_voidSetPinValue+0x88>
     f76:	40 c0       	rjmp	.+128    	; 0xff8 <DIO_voidSetPinValue+0x108>
     f78:	c2 c0       	rjmp	.+388    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
     f7a:	ab e3       	ldi	r26, 0x3B	; 59
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinValue+0xa8>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinValue+0xa4>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	ad c0       	rjmp	.+346    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    CLR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
     fa4:	a8 e3       	ldi	r26, 0x38	; 56
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e8 e3       	ldi	r30, 0x38	; 56
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinValue+0xd2>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinValue+0xce>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	98 c0       	rjmp	.+304    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    CLR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_voidSetPinValue+0xfc>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_voidSetPinValue+0xf8>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	83 c0       	rjmp	.+262    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    CLR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
     ff8:	a2 e3       	ldi	r26, 0x32	; 50
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e3       	ldi	r30, 0x32	; 50
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_voidSetPinValue+0x126>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_voidSetPinValue+0x122>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	6e c0       	rjmp	.+220    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case DIO_HIGH :   switch(Copy_u8PortNumber)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3d 83       	std	Y+5, r19	; 0x05
    102a:	2c 83       	std	Y+4, r18	; 0x04
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	49 f1       	breq	.+82     	; 0x1088 <DIO_voidSetPinValue+0x198>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_voidSetPinValue+0x15a>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <DIO_voidSetPinValue+0x170>
    1048:	5a c0       	rjmp	.+180    	; 0x10fe <DIO_voidSetPinValue+0x20e>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	71 f1       	breq	.+92     	; 0x10b0 <DIO_voidSetPinValue+0x1c0>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	e9 f1       	breq	.+122    	; 0x10d8 <DIO_voidSetPinValue+0x1e8>
    105e:	4f c0       	rjmp	.+158    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    1060:	ab e3       	ldi	r26, 0x3B	; 59
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e3       	ldi	r30, 0x3B	; 59
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_voidSetPinValue+0x18e>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_voidSetPinValue+0x18a>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	3b c0       	rjmp	.+118    	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    1088:	a8 e3       	ldi	r26, 0x38	; 56
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e8 e3       	ldi	r30, 0x38	; 56
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_voidSetPinValue+0x1b6>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_voidSetPinValue+0x1b2>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	27 c0       	rjmp	.+78     	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    10b0:	a5 e3       	ldi	r26, 0x35	; 53
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e3       	ldi	r30, 0x35	; 53
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_voidSetPinValue+0x1de>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_voidSetPinValue+0x1da>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	13 c0       	rjmp	.+38     	; 0x10fe <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    10d8:	a2 e3       	ldi	r26, 0x32	; 50
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e2 e3       	ldi	r30, 0x32	; 50
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_voidSetPinValue+0x206>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_voidSetPinValue+0x202>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    10fe:	29 96       	adiw	r28, 0x09	; 9
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_voidSetPortValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_voidSetPortValue+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	90 f5       	brcc	.+100    	; 0x118a <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3c 83       	std	Y+4, r19	; 0x04
    112e:	2b 83       	std	Y+3, r18	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	d1 f0       	breq	.+52     	; 0x116e <DIO_voidSetPortValue+0x5e>
    113a:	2b 81       	ldd	r18, Y+3	; 0x03
    113c:	3c 81       	ldd	r19, Y+4	; 0x04
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	2c f4       	brge	.+10     	; 0x114e <DIO_voidSetPortValue+0x3e>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	61 f0       	breq	.+24     	; 0x1164 <DIO_voidSetPortValue+0x54>
    114c:	1e c0       	rjmp	.+60     	; 0x118a <DIO_voidSetPortValue+0x7a>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	81 f0       	breq	.+32     	; 0x1178 <DIO_voidSetPortValue+0x68>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <DIO_voidSetPortValue+0x72>
    1162:	13 c0       	rjmp	.+38     	; 0x118a <DIO_voidSetPortValue+0x7a>
        {
            case DIO_PORTA: PORTA_REG = Copy_u8Value;
    1164:	eb e3       	ldi	r30, 0x3B	; 59
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
    116c:	0e c0       	rjmp	.+28     	; 0x118a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTB: PORTB_REG = Copy_u8Value;
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	09 c0       	rjmp	.+18     	; 0x118a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTC: PORTC_REG = Copy_u8Value;
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	04 c0       	rjmp	.+8      	; 0x118a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTD: PORTD_REG = Copy_u8Value;
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_u8GetPinValue+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <DIO_u8GetPinValue+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <DIO_u8GetPinValue+0x1a>
    11b0:	9d c0       	rjmp	.+314    	; 0x12ec <DIO_u8GetPinValue+0x154>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <DIO_u8GetPinValue+0x22>
    11b8:	99 c0       	rjmp	.+306    	; 0x12ec <DIO_u8GetPinValue+0x154>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3d 83       	std	Y+5, r19	; 0x05
    11c2:	2c 83       	std	Y+4, r18	; 0x04
    11c4:	4c 81       	ldd	r20, Y+4	; 0x04
    11c6:	5d 81       	ldd	r21, Y+5	; 0x05
    11c8:	41 30       	cpi	r20, 0x01	; 1
    11ca:	51 05       	cpc	r21, r1
    11cc:	b1 f1       	breq	.+108    	; 0x123a <DIO_u8GetPinValue+0xa2>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	91 05       	cpc	r25, r1
    11d6:	34 f4       	brge	.+12     	; 0x11e4 <DIO_u8GetPinValue+0x4c>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	71 f0       	breq	.+28     	; 0x11fe <DIO_u8GetPinValue+0x66>
    11e2:	84 c0       	rjmp	.+264    	; 0x12ec <DIO_u8GetPinValue+0x154>
    11e4:	4c 81       	ldd	r20, Y+4	; 0x04
    11e6:	5d 81       	ldd	r21, Y+5	; 0x05
    11e8:	42 30       	cpi	r20, 0x02	; 2
    11ea:	51 05       	cpc	r21, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <DIO_u8GetPinValue+0x58>
    11ee:	43 c0       	rjmp	.+134    	; 0x1276 <DIO_u8GetPinValue+0xde>
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <DIO_u8GetPinValue+0x64>
    11fa:	5b c0       	rjmp	.+182    	; 0x12b2 <DIO_u8GetPinValue+0x11a>
    11fc:	77 c0       	rjmp	.+238    	; 0x12ec <DIO_u8GetPinValue+0x154>
        {
            case DIO_PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    11fe:	e9 e3       	ldi	r30, 0x39	; 57
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8GetPinValue+0x80>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8GetPinValue+0x7c>
    121c:	9a 01       	movw	r18, r20
    121e:	28 23       	and	r18, r24
    1220:	39 23       	and	r19, r25
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_u8GetPinValue+0x98>
    122c:	55 95       	asr	r21
    122e:	47 95       	ror	r20
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_u8GetPinValue+0x94>
    1234:	ca 01       	movw	r24, r20
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	59 c0       	rjmp	.+178    	; 0x12ec <DIO_u8GetPinValue+0x154>
            case DIO_PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    123a:	e6 e3       	ldi	r30, 0x36	; 54
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8GetPinValue+0xbc>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8GetPinValue+0xb8>
    1258:	9a 01       	movw	r18, r20
    125a:	28 23       	and	r18, r24
    125c:	39 23       	and	r19, r25
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_u8GetPinValue+0xd4>
    1268:	55 95       	asr	r21
    126a:	47 95       	ror	r20
    126c:	8a 95       	dec	r24
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_u8GetPinValue+0xd0>
    1270:	ca 01       	movw	r24, r20
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	3b c0       	rjmp	.+118    	; 0x12ec <DIO_u8GetPinValue+0x154>
            case DIO_PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    1276:	e3 e3       	ldi	r30, 0x33	; 51
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_u8GetPinValue+0xf8>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	2a 95       	dec	r18
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_u8GetPinValue+0xf4>
    1294:	9a 01       	movw	r18, r20
    1296:	28 23       	and	r18, r24
    1298:	39 23       	and	r19, r25
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_u8GetPinValue+0x110>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_u8GetPinValue+0x10c>
    12ac:	ca 01       	movw	r24, r20
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	1d c0       	rjmp	.+58     	; 0x12ec <DIO_u8GetPinValue+0x154>
            case DIO_PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    12b2:	e0 e3       	ldi	r30, 0x30	; 48
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8GetPinValue+0x134>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_u8GetPinValue+0x130>
    12d0:	9a 01       	movw	r18, r20
    12d2:	28 23       	and	r18, r24
    12d4:	39 23       	and	r19, r25
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8GetPinValue+0x14c>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8GetPinValue+0x148>
    12e8:	ca 01       	movw	r24, r20
    12ea:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_u8GetPortValue+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_u8GetPortValue+0x8>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	90 f5       	brcc	.+100    	; 0x1376 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3c 83       	std	Y+4, r19	; 0x04
    131a:	2b 83       	std	Y+3, r18	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	d1 f0       	breq	.+52     	; 0x135a <DIO_u8GetPortValue+0x5c>
    1326:	2b 81       	ldd	r18, Y+3	; 0x03
    1328:	3c 81       	ldd	r19, Y+4	; 0x04
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	2c f4       	brge	.+10     	; 0x133a <DIO_u8GetPortValue+0x3c>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	61 f0       	breq	.+24     	; 0x1350 <DIO_u8GetPortValue+0x52>
    1338:	1e c0       	rjmp	.+60     	; 0x1376 <DIO_u8GetPortValue+0x78>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	81 f0       	breq	.+32     	; 0x1364 <DIO_u8GetPortValue+0x66>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	91 05       	cpc	r25, r1
    134c:	81 f0       	breq	.+32     	; 0x136e <DIO_u8GetPortValue+0x70>
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <DIO_u8GetPortValue+0x78>
        {
            case DIO_PORTA :    Local_u8Variable = PINA_REG ;   break;  
    1350:	e9 e3       	ldi	r30, 0x39	; 57
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <DIO_u8GetPortValue+0x78>
            case DIO_PORTB :    Local_u8Variable = PINB_REG ;   break;
    135a:	e6 e3       	ldi	r30, 0x36	; 54
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <DIO_u8GetPortValue+0x78>
            case DIO_PORTC :    Local_u8Variable = PINC_REG ;   break;
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <DIO_u8GetPortValue+0x78>
            case DIO_PORTD :    Local_u8Variable = PIND_REG ;   break;
    136e:	e0 e3       	ldi	r30, 0x30	; 48
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_voidTogglePinValue+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_voidTogglePinValue+0x8>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	08 f0       	brcs	.+2      	; 0x139e <DIO_voidTogglePinValue+0x18>
    139c:	72 c0       	rjmp	.+228    	; 0x1482 <DIO_voidTogglePinValue+0xfc>
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <DIO_voidTogglePinValue+0x20>
    13a4:	6e c0       	rjmp	.+220    	; 0x1482 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3c 83       	std	Y+4, r19	; 0x04
    13ae:	2b 83       	std	Y+3, r18	; 0x03
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	49 f1       	breq	.+82     	; 0x140c <DIO_voidTogglePinValue+0x86>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_voidTogglePinValue+0x48>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <DIO_voidTogglePinValue+0x5e>
    13cc:	5a c0       	rjmp	.+180    	; 0x1482 <DIO_voidTogglePinValue+0xfc>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	71 f1       	breq	.+92     	; 0x1434 <DIO_voidTogglePinValue+0xae>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	e9 f1       	breq	.+122    	; 0x145c <DIO_voidTogglePinValue+0xd6>
    13e2:	4f c0       	rjmp	.+158    	; 0x1482 <DIO_voidTogglePinValue+0xfc>
        {
            case DIO_PORTA :    TOG_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_voidTogglePinValue+0x7c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_voidTogglePinValue+0x78>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	3b c0       	rjmp	.+118    	; 0x1482 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTB :    TOG_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    140c:	a8 e3       	ldi	r26, 0x38	; 56
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_voidTogglePinValue+0xa4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_voidTogglePinValue+0xa0>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	27 c0       	rjmp	.+78     	; 0x1482 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTC :    TOG_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_voidTogglePinValue+0xcc>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_voidTogglePinValue+0xc8>
    1456:	84 27       	eor	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTD :    TOG_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    145c:	a2 e3       	ldi	r26, 0x32	; 50
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e2 e3       	ldi	r30, 0x32	; 50
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_voidTogglePinValue+0xf4>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_voidTogglePinValue+0xf0>
    147e:	84 27       	eor	r24, r20
    1480:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_voidTogglePortValue>:


void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_voidTogglePortValue+0x6>
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <DIO_voidTogglePortValue+0x16>
    14a4:	3e c0       	rjmp	.+124    	; 0x1522 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3b 83       	std	Y+3, r19	; 0x03
    14ae:	2a 83       	std	Y+2, r18	; 0x02
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	e9 f0       	breq	.+58     	; 0x14f4 <DIO_voidTogglePortValue+0x64>
    14ba:	2a 81       	ldd	r18, Y+2	; 0x02
    14bc:	3b 81       	ldd	r19, Y+3	; 0x03
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <DIO_voidTogglePortValue+0x3e>
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	9b 81       	ldd	r25, Y+3	; 0x03
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <DIO_voidTogglePortValue+0x54>
    14cc:	2a c0       	rjmp	.+84     	; 0x1522 <DIO_voidTogglePortValue+0x92>
    14ce:	2a 81       	ldd	r18, Y+2	; 0x02
    14d0:	3b 81       	ldd	r19, Y+3	; 0x03
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	b1 f0       	breq	.+44     	; 0x1504 <DIO_voidTogglePortValue+0x74>
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	c9 f0       	breq	.+50     	; 0x1514 <DIO_voidTogglePortValue+0x84>
    14e2:	1f c0       	rjmp	.+62     	; 0x1522 <DIO_voidTogglePortValue+0x92>
        {
            case DIO_PORTA :    PORTA_REG ^= 0xff ;     break;           
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 95       	com	r24
    14f0:	8c 93       	st	X, r24
    14f2:	17 c0       	rjmp	.+46     	; 0x1522 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTB :    PORTB_REG ^= 0xff ;     break;          
    14f4:	a8 e3       	ldi	r26, 0x38	; 56
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 95       	com	r24
    1500:	8c 93       	st	X, r24
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTC :    PORTC_REG ^= 0xff ;     break; 
    1504:	a5 e3       	ldi	r26, 0x35	; 53
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 95       	com	r24
    1510:	8c 93       	st	X, r24
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTD :    PORTD_REG ^= 0xff ;     break; 
    1514:	a2 e3       	ldi	r26, 0x32	; 50
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e2 e3       	ldi	r30, 0x32	; 50
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 95       	com	r24
    1520:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_voidConfig_Pull_Up_Pin>:

void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <DIO_voidConfig_Pull_Up_Pin+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <DIO_voidConfig_Pull_Up_Pin+0x8>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	6a 83       	std	Y+2, r22	; 0x02
    1540:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	e0 f4       	brcc	.+56     	; 0x1580 <DIO_voidConfig_Pull_Up_Pin+0x52>
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	c8 f4       	brcc	.+50     	; 0x1580 <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	59 f0       	breq	.+22     	; 0x1576 <DIO_voidConfig_Pull_Up_Pin+0x48>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	21 30       	cpi	r18, 0x01	; 1
    1566:	31 05       	cpc	r19, r1
    1568:	59 f4       	brne	.+22     	; 0x1580 <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case DIO_ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_HIGH );   break;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	6a 81       	ldd	r22, Y+2	; 0x02
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <DIO_voidConfig_Pull_Up_Pin+0x52>
            case DIO_OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_LOW  );   break;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	6a 81       	ldd	r22, Y+2	; 0x02
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
            default  :                                                                      break;
       }
    }
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <DIO_voidConfig_Pull_Up_Port>:

void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <DIO_voidConfig_Pull_Up_Port+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_voidConfig_Pull_Up_Port+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	84 30       	cpi	r24, 0x04	; 4
    15a4:	b8 f4       	brcc	.+46     	; 0x15d4 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	51 f0       	breq	.+20     	; 0x15cc <DIO_voidConfig_Pull_Up_Port+0x3c>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	21 30       	cpi	r18, 0x01	; 1
    15be:	31 05       	cpc	r19, r1
    15c0:	49 f4       	brne	.+18     	; 0x15d4 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case DIO_ON :  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_HIGH );  break;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <DIO_voidConfig_Pull_Up_Port+0x44>
            case DIO_OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_LOW );   break;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_voidInit (void)
{
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	c6 54       	subi	r28, 0x46	; 70
    15f0:	d0 40       	sbci	r29, 0x00	; 0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , DIO_OUTPUT);
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,DIO_OUTPUT);
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,DIO_OUTPUT);
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,DIO_OUTPUT);
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	62 e0       	ldi	r22, 0x02	; 2
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    1622:	fe 01       	movw	r30, r28
    1624:	ed 5b       	subi	r30, 0xBD	; 189
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	ac e0       	ldi	r26, 0x0C	; 12
    162e:	b2 e4       	ldi	r27, 0x42	; 66
    1630:	80 83       	st	Z, r24
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	a2 83       	std	Z+2, r26	; 0x02
    1636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	8e 01       	movw	r16, r28
    163a:	01 5c       	subi	r16, 0xC1	; 193
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	fe 01       	movw	r30, r28
    1640:	ed 5b       	subi	r30, 0xBD	; 189
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a ef       	ldi	r20, 0xFA	; 250
    1652:	54 e4       	ldi	r21, 0x44	; 68
    1654:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	a2 83       	std	Z+2, r26	; 0x02
    1664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1666:	fe 01       	movw	r30, r28
    1668:	ff 96       	adiw	r30, 0x3f	; 63
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <LCD_voidInit+0xaa>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e af       	std	Y+62, r25	; 0x3e
    1688:	8d af       	std	Y+61, r24	; 0x3d
    168a:	46 c0       	rjmp	.+140    	; 0x1718 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    168c:	fe 01       	movw	r30, r28
    168e:	ff 96       	adiw	r30, 0x3f	; 63
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	64 f5       	brge	.+88     	; 0x1700 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 5b       	subi	r30, 0xBD	; 189
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e af       	std	Y+62, r25	; 0x3e
    16d4:	8d af       	std	Y+61, r24	; 0x3d
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <LCD_voidInit+0x114>
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c af       	std	Y+60, r25	; 0x3c
    16de:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_voidInit+0x102>
    16e8:	9c af       	std	Y+60, r25	; 0x3c
    16ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9e af       	std	Y+62, r25	; 0x3e
    16f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <LCD_voidInit+0xf6>
    16fe:	16 c0       	rjmp	.+44     	; 0x172c <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	fe 01       	movw	r30, r28
    1702:	ff 96       	adiw	r30, 0x3f	; 63
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9e af       	std	Y+62, r25	; 0x3e
    1716:	8d af       	std	Y+61, r24	; 0x3d
    1718:	8d ad       	ldd	r24, Y+61	; 0x3d
    171a:	9e ad       	ldd	r25, Y+62	; 0x3e
    171c:	9a af       	std	Y+58, r25	; 0x3a
    171e:	89 af       	std	Y+57, r24	; 0x39
    1720:	89 ad       	ldd	r24, Y+57	; 0x39
    1722:	9a ad       	ldd	r25, Y+58	; 0x3a
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_voidInit+0x142>
    1728:	9a af       	std	Y+58, r25	; 0x3a
    172a:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_voidSetBusyWait_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x7 );
    172c:	88 e3       	ldi	r24, 0x38	; 56
    172e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	8d ab       	std	Y+53, r24	; 0x35
    173c:	9e ab       	std	Y+54, r25	; 0x36
    173e:	af ab       	std	Y+55, r26	; 0x37
    1740:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6d a9       	ldd	r22, Y+53	; 0x35
    1744:	7e a9       	ldd	r23, Y+54	; 0x36
    1746:	8f a9       	ldd	r24, Y+55	; 0x37
    1748:	98 ad       	ldd	r25, Y+56	; 0x38
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	89 ab       	std	Y+49, r24	; 0x31
    175c:	9a ab       	std	Y+50, r25	; 0x32
    175e:	ab ab       	std	Y+51, r26	; 0x33
    1760:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1762:	69 a9       	ldd	r22, Y+49	; 0x31
    1764:	7a a9       	ldd	r23, Y+50	; 0x32
    1766:	8b a9       	ldd	r24, Y+51	; 0x33
    1768:	9c a9       	ldd	r25, Y+52	; 0x34
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <LCD_voidInit+0x1a2>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	98 ab       	std	Y+48, r25	; 0x30
    1780:	8f a7       	std	Y+47, r24	; 0x2f
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6d a9       	ldd	r22, Y+53	; 0x35
    179e:	7e a9       	ldd	r23, Y+54	; 0x36
    17a0:	8f a9       	ldd	r24, Y+55	; 0x37
    17a2:	98 ad       	ldd	r25, Y+56	; 0x38
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	98 ab       	std	Y+48, r25	; 0x30
    17c2:	8f a7       	std	Y+47, r24	; 0x2f
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <LCD_voidInit+0x202>
    17c6:	88 ec       	ldi	r24, 0xC8	; 200
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e a7       	std	Y+46, r25	; 0x2e
    17cc:	8d a7       	std	Y+45, r24	; 0x2d
    17ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_voidInit+0x1f0>
    17d6:	9e a7       	std	Y+46, r25	; 0x2e
    17d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <LCD_voidInit+0x1e4>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	69 a9       	ldd	r22, Y+49	; 0x31
    17f0:	7a a9       	ldd	r23, Y+50	; 0x32
    17f2:	8b a9       	ldd	r24, Y+51	; 0x33
    17f4:	9c a9       	ldd	r25, Y+52	; 0x34
    17f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	98 ab       	std	Y+48, r25	; 0x30
    1800:	8f a7       	std	Y+47, r24	; 0x2f
    1802:	8f a5       	ldd	r24, Y+47	; 0x2f
    1804:	98 a9       	ldd	r25, Y+48	; 0x30
    1806:	9c a7       	std	Y+44, r25	; 0x2c
    1808:	8b a7       	std	Y+43, r24	; 0x2b
    180a:	8b a5       	ldd	r24, Y+43	; 0x2b
    180c:	9c a5       	ldd	r25, Y+44	; 0x2c
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_voidInit+0x22c>
    1812:	9c a7       	std	Y+44, r25	; 0x2c
    1814:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    1816:	8c e0       	ldi	r24, 0x0C	; 12
    1818:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e8       	ldi	r26, 0x80	; 128
    1822:	bf e3       	ldi	r27, 0x3F	; 63
    1824:	8f a3       	std	Y+39, r24	; 0x27
    1826:	98 a7       	std	Y+40, r25	; 0x28
    1828:	a9 a7       	std	Y+41, r26	; 0x29
    182a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6f a1       	ldd	r22, Y+39	; 0x27
    182e:	78 a5       	ldd	r23, Y+40	; 0x28
    1830:	89 a5       	ldd	r24, Y+41	; 0x29
    1832:	9a a5       	ldd	r25, Y+42	; 0x2a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8b a3       	std	Y+35, r24	; 0x23
    1846:	9c a3       	std	Y+36, r25	; 0x24
    1848:	ad a3       	std	Y+37, r26	; 0x25
    184a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    184c:	6b a1       	ldd	r22, Y+35	; 0x23
    184e:	7c a1       	ldd	r23, Y+36	; 0x24
    1850:	8d a1       	ldd	r24, Y+37	; 0x25
    1852:	9e a1       	ldd	r25, Y+38	; 0x26
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <LCD_voidInit+0x28c>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9a a3       	std	Y+34, r25	; 0x22
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    186e:	6b a1       	ldd	r22, Y+35	; 0x23
    1870:	7c a1       	ldd	r23, Y+36	; 0x24
    1872:	8d a1       	ldd	r24, Y+37	; 0x25
    1874:	9e a1       	ldd	r25, Y+38	; 0x26
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6f a1       	ldd	r22, Y+39	; 0x27
    1888:	78 a5       	ldd	r23, Y+40	; 0x28
    188a:	89 a5       	ldd	r24, Y+41	; 0x29
    188c:	9a a5       	ldd	r25, Y+42	; 0x2a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <LCD_voidInit+0x2ec>
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	98 a3       	std	Y+32, r25	; 0x20
    18b6:	8f 8f       	std	Y+31, r24	; 0x1f
    18b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ba:	98 a1       	ldd	r25, Y+32	; 0x20
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_voidInit+0x2da>
    18c0:	98 a3       	std	Y+32, r25	; 0x20
    18c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	89 a1       	ldd	r24, Y+33	; 0x21
    18c6:	9a a1       	ldd	r25, Y+34	; 0x22
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	9a a1       	ldd	r25, Y+34	; 0x22
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <LCD_voidInit+0x2ce>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9a a3       	std	Y+34, r25	; 0x22
    18ea:	89 a3       	std	Y+33, r24	; 0x21
    18ec:	89 a1       	ldd	r24, Y+33	; 0x21
    18ee:	9a a1       	ldd	r25, Y+34	; 0x22
    18f0:	9e 8f       	std	Y+30, r25	; 0x1e
    18f2:	8d 8f       	std	Y+29, r24	; 0x1d
    18f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_voidInit+0x316>
    18fc:	9e 8f       	std	Y+30, r25	; 0x1e
    18fe:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e4       	ldi	r27, 0x40	; 64
    190e:	89 8f       	std	Y+25, r24	; 0x19
    1910:	9a 8f       	std	Y+26, r25	; 0x1a
    1912:	ab 8f       	std	Y+27, r26	; 0x1b
    1914:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	69 8d       	ldd	r22, Y+25	; 0x19
    1918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8d 8b       	std	Y+21, r24	; 0x15
    1930:	9e 8b       	std	Y+22, r25	; 0x16
    1932:	af 8b       	std	Y+23, r26	; 0x17
    1934:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <LCD_voidInit+0x376>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1958:	6d 89       	ldd	r22, Y+21	; 0x15
    195a:	7e 89       	ldd	r23, Y+22	; 0x16
    195c:	8f 89       	ldd	r24, Y+23	; 0x17
    195e:	98 8d       	ldd	r25, Y+24	; 0x18
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	69 8d       	ldd	r22, Y+25	; 0x19
    1972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9c 8b       	std	Y+20, r25	; 0x14
    1996:	8b 8b       	std	Y+19, r24	; 0x13
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_voidInit+0x3d6>
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9a 8b       	std	Y+18, r25	; 0x12
    19a0:	89 8b       	std	Y+17, r24	; 0x11
    19a2:	89 89       	ldd	r24, Y+17	; 0x11
    19a4:	9a 89       	ldd	r25, Y+18	; 0x12
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_voidInit+0x3c4>
    19aa:	9a 8b       	std	Y+18, r25	; 0x12
    19ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_voidInit+0x3b8>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6d 89       	ldd	r22, Y+21	; 0x15
    19c4:	7e 89       	ldd	r23, Y+22	; 0x16
    19c6:	8f 89       	ldd	r24, Y+23	; 0x17
    19c8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
    19d4:	8b 8b       	std	Y+19, r24	; 0x13
    19d6:	8b 89       	ldd	r24, Y+19	; 0x13
    19d8:	9c 89       	ldd	r25, Y+20	; 0x14
    19da:	98 8b       	std	Y+16, r25	; 0x10
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
    19de:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e0:	98 89       	ldd	r25, Y+16	; 0x10
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_voidInit+0x400>
    19e6:	98 8b       	std	Y+16, r25	; 0x10
    19e8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_voidSetBusyWait_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    19ea:	86 e0       	ldi	r24, 0x06	; 6
    19ec:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e8       	ldi	r26, 0x80	; 128
    19f6:	bf e3       	ldi	r27, 0x3F	; 63
    19f8:	8b 87       	std	Y+11, r24	; 0x0b
    19fa:	9c 87       	std	Y+12, r25	; 0x0c
    19fc:	ad 87       	std	Y+13, r26	; 0x0d
    19fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8f 83       	std	Y+7, r24	; 0x07
    1a1a:	98 87       	std	Y+8, r25	; 0x08
    1a1c:	a9 87       	std	Y+9, r26	; 0x09
    1a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <LCD_voidInit+0x460>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <LCD_voidInit+0x4c0>
    1a84:	88 ec       	ldi	r24, 0xC8	; 200
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_voidInit+0x4ae>
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <LCD_voidInit+0x4a2>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_voidInit+0x4ea>
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);


}
    1ad4:	ca 5b       	subi	r28, 0xBA	; 186
    1ad6:	df 4f       	sbci	r29, 0xFF	; 255
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <LCD_voidWriteCommand>:


void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	2f 97       	sbiw	r28, 0x0f	; 15
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_LOW);
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b1a:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD_voidWriteCommand+0xee>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_voidWriteCommand+0xdc>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <LCD_voidWriteCommand+0xd0>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_voidWriteCommand+0x118>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
}
    1c16:	2f 96       	adiw	r28, 0x0f	; 15
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_voidWriteChar>:


void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	2f 97       	sbiw	r28, 0x0f	; 15
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_HIGH);
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c56:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	8b 87       	std	Y+11, r24	; 0x0b
    1c6e:	9c 87       	std	Y+12, r25	; 0x0c
    1c70:	ad 87       	std	Y+13, r26	; 0x0d
    1c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	98 87       	std	Y+8, r25	; 0x08
    1c90:	a9 87       	std	Y+9, r26	; 0x09
    1c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_voidWriteChar+0x8e>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_voidWriteChar+0x10c>
	else if (__tmp > 65535)
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_voidWriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_voidWriteChar+0xee>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_voidWriteChar+0xdc>
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_voidWriteChar+0xd0>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_voidWriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_voidWriteChar+0x118>
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	62 e0       	ldi	r22, 0x02	; 2
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
}
    1d52:	2f 96       	adiw	r28, 0x0f	; 15
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <LCD_voidWriteString>:



void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <LCD_voidWriteString+0x6>
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9b 83       	std	Y+3, r25	; 0x03
    1d72:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	1d c0       	rjmp	.+58     	; 0x1db2 <LCD_voidWriteString+0x4e>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	fc 01       	movw	r30, r24
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	80 81       	ld	r24, Z
    1d8a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_voidWriteChar>
        i++;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	89 83       	std	Y+1, r24	; 0x01
        if(i==16)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	80 31       	cpi	r24, 0x10	; 16
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <LCD_voidWriteString+0x40>
        {
        	LCD_voidGoTo_XY(1,0);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <LCD_voidWriteString+0x4e>
        }
        else if(i==32)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	80 32       	cpi	r24, 0x20	; 32
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <LCD_voidWriteString+0x4e>
        {
        	LCD_voidGoTo_XY(0,0);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>


void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e2 0f       	add	r30, r18
    1dc0:	f3 1f       	adc	r31, r19
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	c1 f6       	brne	.-80     	; 0x1d78 <LCD_voidWriteString+0x14>
        else if(i==32)
        {
        	LCD_voidGoTo_XY(0,0);
        }
    }
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <LCD_voidWrite_u32Number>:


void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	6b 97       	sbiw	r28, 0x1b	; 27
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	68 8f       	std	Y+24, r22	; 0x18
    1dee:	79 8f       	std	Y+25, r23	; 0x19
    1df0:	8a 8f       	std	Y+26, r24	; 0x1a
    1df2:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    1df4:	1b 82       	std	Y+3, r1	; 0x03
    1df6:	2d c0       	rjmp	.+90     	; 0x1e52 <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	08 2f       	mov	r16, r24
    1dfc:	10 e0       	ldi	r17, 0x00	; 0
    1dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    1e00:	99 8d       	ldd	r25, Y+25	; 0x19
    1e02:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e04:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e06:	2a e0       	ldi	r18, 0x0A	; 10
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 ac 13 	call	0x2758	; 0x2758 <__udivmodsi4>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	04 96       	adiw	r24, 0x04	; 4
    1e20:	fc 01       	movw	r30, r24
    1e22:	e0 0f       	add	r30, r16
    1e24:	f1 1f       	adc	r31, r17
    1e26:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    1e28:	88 8d       	ldd	r24, Y+24	; 0x18
    1e2a:	99 8d       	ldd	r25, Y+25	; 0x19
    1e2c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e2e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e30:	2a e0       	ldi	r18, 0x0A	; 10
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 ac 13 	call	0x2758	; 0x2758 <__udivmodsi4>
    1e40:	da 01       	movw	r26, r20
    1e42:	c9 01       	movw	r24, r18
    1e44:	88 8f       	std	Y+24, r24	; 0x18
    1e46:	99 8f       	std	Y+25, r25	; 0x19
    1e48:	aa 8f       	std	Y+26, r26	; 0x1a
    1e4a:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    1e52:	88 8d       	ldd	r24, Y+24	; 0x18
    1e54:	99 8d       	ldd	r25, Y+25	; 0x19
    1e56:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e58:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	a1 05       	cpc	r26, r1
    1e5e:	b1 05       	cpc	r27, r1
    1e60:	59 f6       	brne	.-106    	; 0x1df8 <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	81 50       	subi	r24, 0x01	; 1
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	10 c0       	rjmp	.+32     	; 0x1e94 <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    1e74:	29 81       	ldd	r18, Y+1	; 0x01
    1e76:	3a 81       	ldd	r19, Y+2	; 0x02
    1e78:	ce 01       	movw	r24, r28
    1e7a:	04 96       	adiw	r24, 0x04	; 4
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	80 81       	ld	r24, Z
    1e84:	80 5d       	subi	r24, 0xD0	; 208
    1e86:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	99 23       	and	r25, r25
    1e9a:	64 f7       	brge	.-40     	; 0x1e74 <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    1e9c:	6b 96       	adiw	r28, 0x1b	; 27
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	08 95       	ret

00001eb2 <LCD_voidGoTo_XY>:


void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_voidGoTo_XY+0x6>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <LCD_voidGoTo_XY+0x8>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	d8 f4       	brcc	.+54     	; 0x1efe <LCD_voidGoTo_XY+0x4c>
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 31       	cpi	r24, 0x10	; 16
    1ecc:	c0 f4       	brcc	.+48     	; 0x1efe <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	3c 83       	std	Y+4, r19	; 0x04
    1ed6:	2b 83       	std	Y+3, r18	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	31 f0       	breq	.+12     	; 0x1eec <LCD_voidGoTo_XY+0x3a>
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee4:	21 30       	cpi	r18, 0x01	; 1
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	31 f0       	breq	.+12     	; 0x1ef6 <LCD_voidGoTo_XY+0x44>
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	80 58       	subi	r24, 0x80	; 128
    1ef0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	80 54       	subi	r24, 0x40	; 64
    1efa:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_voidDrawPattern>:



void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_voidDrawPattern+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_voidDrawPattern+0x8>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	7c 83       	std	Y+4, r23	; 0x04
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    1f24:	19 82       	std	Y+1, r1	; 0x01
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	fc 01       	movw	r30, r24
    1f34:	e2 0f       	add	r30, r18
    1f36:	f3 1f       	adc	r31, r19
    1f38:	80 81       	ld	r24, Z
    1f3a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_voidWriteChar>

void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );

    for ( u8 i=0 ; i < 8 ; i++ )
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	88 30       	cpi	r24, 0x08	; 8
    1f48:	78 f3       	brcs	.-34     	; 0x1f28 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <LCD_voidWritePattern>:




void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <LCD_voidWritePattern+0x6>
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
    1f68:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	6b 81       	ldd	r22, Y+3	; 0x03
    1f6e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_voidWriteChar>
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_voidClearDisplay>:




void LCD_voidClearDisplay (void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
    LCD_voidGoTo_XY(0,0);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
}
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <LCD_voidShiftLeft>:




void LCD_voidShiftLeft (void)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    1fa8:	87 e0       	ldi	r24, 0x07	; 7
    1faa:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_voidShiftRight>:




void LCD_voidShiftRight (void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    1fbc:	85 e0       	ldi	r24, 0x05	; 5
    1fbe:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidWriteCommand>
}
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <SEGMENT_voidInitSegmentPort>:




void SEGMENT_voidInitSegmentPort ( u8 Copy_u8PortNumber )
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <SEGMENT_voidInitSegmentPort+0x6>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8PortNumber)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3b 83       	std	Y+3, r19	; 0x03
    1fde:	2a 83       	std	Y+2, r18	; 0x02
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	d1 f0       	breq	.+52     	; 0x201e <SEGMENT_voidInitSegmentPort+0x56>
    1fea:	2a 81       	ldd	r18, Y+2	; 0x02
    1fec:	3b 81       	ldd	r19, Y+3	; 0x03
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <SEGMENT_voidInitSegmentPort+0x36>
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <SEGMENT_voidInitSegmentPort+0x4c>
    1ffc:	1e c0       	rjmp	.+60     	; 0x203a <SEGMENT_voidInitSegmentPort+0x72>
    1ffe:	2a 81       	ldd	r18, Y+2	; 0x02
    2000:	3b 81       	ldd	r19, Y+3	; 0x03
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	81 f0       	breq	.+32     	; 0x2028 <SEGMENT_voidInitSegmentPort+0x60>
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	91 05       	cpc	r25, r1
    2010:	81 f0       	breq	.+32     	; 0x2032 <SEGMENT_voidInitSegmentPort+0x6a>
    2012:	13 c0       	rjmp	.+38     	; 0x203a <SEGMENT_voidInitSegmentPort+0x72>
    {
        case DIO_PORTA :   DIO_voidSetPortDirection (DIO_PORTA,DIO_OUTPUT);    break;
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    201c:	0e c0       	rjmp	.+28     	; 0x203a <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTB :   DIO_voidSetPortDirection (DIO_PORTB,DIO_OUTPUT);    break;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    2026:	09 c0       	rjmp	.+18     	; 0x203a <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTC :   DIO_voidSetPortDirection (DIO_PORTC,DIO_OUTPUT);    break;
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    2030:	04 c0       	rjmp	.+8      	; 0x203a <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTD :   DIO_voidSetPortDirection (DIO_PORTD,DIO_OUTPUT);    break;
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
        default    :                                               break;
    }
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <SEGMENT_voidPrintNumber>:



void SEGMENT_voidPrintNumber ( u8 Copy_u8PortNumber , u8 Copy_SegmentPolarity , u8 Copy_u8Number )
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	29 97       	sbiw	r28, 0x09	; 9
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	6a 83       	std	Y+2, r22	; 0x02
    205e:	4b 83       	std	Y+3, r20	; 0x03
    switch ( Copy_SegmentPolarity )
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	39 87       	std	Y+9, r19	; 0x09
    2068:	28 87       	std	Y+8, r18	; 0x08
    206a:	88 85       	ldd	r24, Y+8	; 0x08
    206c:	99 85       	ldd	r25, Y+9	; 0x09
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	39 f0       	breq	.+14     	; 0x2080 <SEGMENT_voidPrintNumber+0x3a>
    2072:	28 85       	ldd	r18, Y+8	; 0x08
    2074:	39 85       	ldd	r19, Y+9	; 0x09
    2076:	21 30       	cpi	r18, 0x01	; 1
    2078:	31 05       	cpc	r19, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <SEGMENT_voidPrintNumber+0x38>
    207c:	50 c0       	rjmp	.+160    	; 0x211e <SEGMENT_voidPrintNumber+0xd8>
    207e:	a5 c0       	rjmp	.+330    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
    {
        case COMMON_ANODE   :
        						switch(Copy_u8PortNumber)
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3f 83       	std	Y+7, r19	; 0x07
    2088:	2e 83       	std	Y+6, r18	; 0x06
    208a:	8e 81       	ldd	r24, Y+6	; 0x06
    208c:	9f 81       	ldd	r25, Y+7	; 0x07
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	09 f1       	breq	.+66     	; 0x20d6 <SEGMENT_voidPrintNumber+0x90>
    2094:	2e 81       	ldd	r18, Y+6	; 0x06
    2096:	3f 81       	ldd	r19, Y+7	; 0x07
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	2c f4       	brge	.+10     	; 0x20a8 <SEGMENT_voidPrintNumber+0x62>
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	61 f0       	breq	.+24     	; 0x20be <SEGMENT_voidPrintNumber+0x78>
    20a6:	91 c0       	rjmp	.+290    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
    20a8:	2e 81       	ldd	r18, Y+6	; 0x06
    20aa:	3f 81       	ldd	r19, Y+7	; 0x07
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	f1 f0       	breq	.+60     	; 0x20ee <SEGMENT_voidPrintNumber+0xa8>
    20b2:	8e 81       	ldd	r24, Y+6	; 0x06
    20b4:	9f 81       	ldd	r25, Y+7	; 0x07
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	91 05       	cpc	r25, r1
    20ba:	29 f1       	breq	.+74     	; 0x2106 <SEGMENT_voidPrintNumber+0xc0>
    20bc:	86 c0       	rjmp	.+268    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case DIO_PORTA :
                                    	DIO_voidSetPortValue (DIO_PORTA,Common_Anode_Arr[Copy_u8Number]);
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	fc 01       	movw	r30, r24
    20c6:	ef 54       	subi	r30, 0x4F	; 79
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	90 81       	ld	r25, Z
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	69 2f       	mov	r22, r25
    20d0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    20d4:	7a c0       	rjmp	.+244    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTB :
                                    	DIO_voidSetPortValue (DIO_PORTB,Common_Anode_Arr[Copy_u8Number]);
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	fc 01       	movw	r30, r24
    20de:	ef 54       	subi	r30, 0x4F	; 79
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	90 81       	ld	r25, Z
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	69 2f       	mov	r22, r25
    20e8:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    20ec:	6e c0       	rjmp	.+220    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTC :
                                    	DIO_voidSetPortValue (DIO_PORTC,Common_Anode_Arr[Copy_u8Number]);
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	fc 01       	movw	r30, r24
    20f6:	ef 54       	subi	r30, 0x4F	; 79
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	90 81       	ld	r25, Z
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	69 2f       	mov	r22, r25
    2100:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    2104:	62 c0       	rjmp	.+196    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTD :
                                    	DIO_voidSetPortValue (DIO_PORTD,Common_Anode_Arr[Copy_u8Number]);
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	fc 01       	movw	r30, r24
    210e:	ef 54       	subi	r30, 0x4F	; 79
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	90 81       	ld	r25, Z
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	69 2f       	mov	r22, r25
    2118:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    211c:	56 c0       	rjmp	.+172    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    default    :
                                    	break;
                                }
                                break;
        case COMMON_CATHODE :   switch(Copy_u8PortNumber)
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3d 83       	std	Y+5, r19	; 0x05
    2126:	2c 83       	std	Y+4, r18	; 0x04
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	19 f1       	breq	.+70     	; 0x2178 <SEGMENT_voidPrintNumber+0x132>
    2132:	2c 81       	ldd	r18, Y+4	; 0x04
    2134:	3d 81       	ldd	r19, Y+5	; 0x05
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	2c f4       	brge	.+10     	; 0x2146 <SEGMENT_voidPrintNumber+0x100>
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	61 f0       	breq	.+24     	; 0x215c <SEGMENT_voidPrintNumber+0x116>
    2144:	42 c0       	rjmp	.+132    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
    2146:	2c 81       	ldd	r18, Y+4	; 0x04
    2148:	3d 81       	ldd	r19, Y+5	; 0x05
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	11 f1       	breq	.+68     	; 0x2194 <SEGMENT_voidPrintNumber+0x14e>
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	9d 81       	ldd	r25, Y+5	; 0x05
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	91 05       	cpc	r25, r1
    2158:	59 f1       	breq	.+86     	; 0x21b0 <SEGMENT_voidPrintNumber+0x16a>
    215a:	37 c0       	rjmp	.+110    	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case DIO_PORTA :
                                    	DIO_voidSetPortValue (DIO_PORTA,~Common_Anode_Arr[Copy_u8Number]);
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	fc 01       	movw	r30, r24
    2164:	ef 54       	subi	r30, 0x4F	; 79
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	98 2f       	mov	r25, r24
    216c:	90 95       	com	r25
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	69 2f       	mov	r22, r25
    2172:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    2176:	29 c0       	rjmp	.+82     	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTB :
                                    	DIO_voidSetPortValue (DIO_PORTB,~Common_Anode_Arr[Copy_u8Number]);
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	fc 01       	movw	r30, r24
    2180:	ef 54       	subi	r30, 0x4F	; 79
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	98 2f       	mov	r25, r24
    2188:	90 95       	com	r25
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	69 2f       	mov	r22, r25
    218e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    2192:	1b c0       	rjmp	.+54     	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTC :
                                    	DIO_voidSetPortValue (DIO_PORTC,~Common_Anode_Arr[Copy_u8Number]);
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	fc 01       	movw	r30, r24
    219c:	ef 54       	subi	r30, 0x4F	; 79
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	98 2f       	mov	r25, r24
    21a4:	90 95       	com	r25
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	69 2f       	mov	r22, r25
    21aa:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTD :
                                    	DIO_voidSetPortValue (DIO_PORTD,~Common_Anode_Arr[Copy_u8Number]);
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	fc 01       	movw	r30, r24
    21b8:	ef 54       	subi	r30, 0x4F	; 79
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	98 2f       	mov	r25, r24
    21c0:	90 95       	com	r25
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	69 2f       	mov	r22, r25
    21c6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_voidSetPortValue>
                                break;
        default             :
        	break;
    }
    
}
    21ca:	29 96       	adiw	r28, 0x09	; 9
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <main>:

void StartProgram			 (void);


void main ()
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	eb 97       	sbiw	r28, 0x3b	; 59
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	65 e0       	ldi	r22, 0x05	; 5
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	66 e0       	ldi	r22, 0x06	; 6
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	67 e0       	ldi	r22, 0x07	; 7
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	LCD_voidInit();
    220e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <LCD_voidInit>
	StartProgram();
    2212:	0e 94 93 13 	call	0x2726	; 0x2726 <StartProgram>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a8 ec       	ldi	r26, 0xC8	; 200
    221c:	b3 e4       	ldi	r27, 0x43	; 67
    221e:	8d ab       	std	Y+53, r24	; 0x35
    2220:	9e ab       	std	Y+54, r25	; 0x36
    2222:	af ab       	std	Y+55, r26	; 0x37
    2224:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6d a9       	ldd	r22, Y+53	; 0x35
    2228:	7e a9       	ldd	r23, Y+54	; 0x36
    222a:	8f a9       	ldd	r24, Y+55	; 0x37
    222c:	98 ad       	ldd	r25, Y+56	; 0x38
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	89 ab       	std	Y+49, r24	; 0x31
    2240:	9a ab       	std	Y+50, r25	; 0x32
    2242:	ab ab       	std	Y+51, r26	; 0x33
    2244:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2246:	69 a9       	ldd	r22, Y+49	; 0x31
    2248:	7a a9       	ldd	r23, Y+50	; 0x32
    224a:	8b a9       	ldd	r24, Y+51	; 0x33
    224c:	9c a9       	ldd	r25, Y+52	; 0x34
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <main+0x8c>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	98 ab       	std	Y+48, r25	; 0x30
    2264:	8f a7       	std	Y+47, r24	; 0x2f
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <main+0x10a>
	else if (__tmp > 65535)
    2268:	69 a9       	ldd	r22, Y+49	; 0x31
    226a:	7a a9       	ldd	r23, Y+50	; 0x32
    226c:	8b a9       	ldd	r24, Y+51	; 0x33
    226e:	9c a9       	ldd	r25, Y+52	; 0x34
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6d a9       	ldd	r22, Y+53	; 0x35
    2282:	7e a9       	ldd	r23, Y+54	; 0x36
    2284:	8f a9       	ldd	r24, Y+55	; 0x37
    2286:	98 ad       	ldd	r25, Y+56	; 0x38
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	98 ab       	std	Y+48, r25	; 0x30
    22a6:	8f a7       	std	Y+47, r24	; 0x2f
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <main+0xec>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9e a7       	std	Y+46, r25	; 0x2e
    22b0:	8d a7       	std	Y+45, r24	; 0x2d
    22b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <main+0xda>
    22ba:	9e a7       	std	Y+46, r25	; 0x2e
    22bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c0:	98 a9       	ldd	r25, Y+48	; 0x30
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	98 ab       	std	Y+48, r25	; 0x30
    22c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ca:	98 a9       	ldd	r25, Y+48	; 0x30
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <main+0xce>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	69 a9       	ldd	r22, Y+49	; 0x31
    22d4:	7a a9       	ldd	r23, Y+50	; 0x32
    22d6:	8b a9       	ldd	r24, Y+51	; 0x33
    22d8:	9c a9       	ldd	r25, Y+52	; 0x34
    22da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	98 ab       	std	Y+48, r25	; 0x30
    22e4:	8f a7       	std	Y+47, r24	; 0x2f
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	9c a7       	std	Y+44, r25	; 0x2c
    22ec:	8b a7       	std	Y+43, r24	; 0x2b
    22ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <main+0x116>
    22f6:	9c a7       	std	Y+44, r25	; 0x2c
    22f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(400);
	LCD_voidClearDisplay();
    22fa:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_voidClearDisplay>
	SEGMENT_voidInitSegmentPort(DIO_PORTA);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <SEGMENT_voidInitSegmentPort>
	while (1)
	{
		for(s8 i=9;i>=0;i--)
    2304:	89 e0       	ldi	r24, 0x09	; 9
    2306:	8b af       	std	Y+59, r24	; 0x3b
    2308:	a9 c0       	rjmp	.+338    	; 0x245c <main+0x280>
		{

			LCD_voidWriteString("STOP ");
    230a:	80 e6       	ldi	r24, 0x60	; 96
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidGoTo_XY(1,0);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Remaining ");
    231a:	86 e6       	ldi	r24, 0x66	; 102
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidWrite_u32Number(i);
    2322:	8b ad       	ldd	r24, Y+59	; 0x3b
    2324:	99 27       	eor	r25, r25
    2326:	87 fd       	sbrc	r24, 7
    2328:	90 95       	com	r25
    232a:	a9 2f       	mov	r26, r25
    232c:	b9 2f       	mov	r27, r25
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_voidWrite_u32Number>
			LCD_voidWriteString(" Sec ");
    2336:	81 e7       	ldi	r24, 0x71	; 113
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			SEGMENT_voidPrintNumber(DIO_PORTA,COMMON_CATHODE,i);
    233e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	49 2f       	mov	r20, r25
    2346:	0e 94 23 10 	call	0x2046	; 0x2046 <SEGMENT_voidPrintNumber>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	65 e0       	ldi	r22, 0x05	; 5
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	66 e0       	ldi	r22, 0x06	; 6
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	67 e0       	ldi	r22, 0x07	; 7
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	aa e7       	ldi	r26, 0x7A	; 122
    236e:	b4 e4       	ldi	r27, 0x44	; 68
    2370:	8f a3       	std	Y+39, r24	; 0x27
    2372:	98 a7       	std	Y+40, r25	; 0x28
    2374:	a9 a7       	std	Y+41, r26	; 0x29
    2376:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6f a1       	ldd	r22, Y+39	; 0x27
    237a:	78 a5       	ldd	r23, Y+40	; 0x28
    237c:	89 a5       	ldd	r24, Y+41	; 0x29
    237e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8b a3       	std	Y+35, r24	; 0x23
    2392:	9c a3       	std	Y+36, r25	; 0x24
    2394:	ad a3       	std	Y+37, r26	; 0x25
    2396:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2398:	6b a1       	ldd	r22, Y+35	; 0x23
    239a:	7c a1       	ldd	r23, Y+36	; 0x24
    239c:	8d a1       	ldd	r24, Y+37	; 0x25
    239e:	9e a1       	ldd	r25, Y+38	; 0x26
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <main+0x1de>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <main+0x25c>
	else if (__tmp > 65535)
    23ba:	6b a1       	ldd	r22, Y+35	; 0x23
    23bc:	7c a1       	ldd	r23, Y+36	; 0x24
    23be:	8d a1       	ldd	r24, Y+37	; 0x25
    23c0:	9e a1       	ldd	r25, Y+38	; 0x26
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6f a1       	ldd	r22, Y+39	; 0x27
    23d4:	78 a5       	ldd	r23, Y+40	; 0x28
    23d6:	89 a5       	ldd	r24, Y+41	; 0x29
    23d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <main+0x23e>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	98 a3       	std	Y+32, r25	; 0x20
    2402:	8f 8f       	std	Y+31, r24	; 0x1f
    2404:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2406:	98 a1       	ldd	r25, Y+32	; 0x20
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x22c>
    240c:	98 a3       	std	Y+32, r25	; 0x20
    240e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	89 a1       	ldd	r24, Y+33	; 0x21
    2412:	9a a1       	ldd	r25, Y+34	; 0x22
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	9a a1       	ldd	r25, Y+34	; 0x22
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <main+0x220>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9a a3       	std	Y+34, r25	; 0x22
    2436:	89 a3       	std	Y+33, r24	; 0x21
    2438:	89 a1       	ldd	r24, Y+33	; 0x21
    243a:	9a a1       	ldd	r25, Y+34	; 0x22
    243c:	9e 8f       	std	Y+30, r25	; 0x1e
    243e:	8d 8f       	std	Y+29, r24	; 0x1d
    2440:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2442:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <main+0x268>
    2448:	9e 8f       	std	Y+30, r25	; 0x1e
    244a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			if(i== 0)
    244c:	8b ad       	ldd	r24, Y+59	; 0x3b
    244e:	88 23       	and	r24, r24
    2450:	11 f4       	brne	.+4      	; 0x2456 <main+0x27a>
			{
				LCD_voidClearDisplay();
    2452:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_voidClearDisplay>
	_delay_ms(400);
	LCD_voidClearDisplay();
	SEGMENT_voidInitSegmentPort(DIO_PORTA);
	while (1)
	{
		for(s8 i=9;i>=0;i--)
    2456:	8b ad       	ldd	r24, Y+59	; 0x3b
    2458:	81 50       	subi	r24, 0x01	; 1
    245a:	8b af       	std	Y+59, r24	; 0x3b
    245c:	8b ad       	ldd	r24, Y+59	; 0x3b
    245e:	88 23       	and	r24, r24
    2460:	0c f0       	brlt	.+2      	; 0x2464 <main+0x288>
    2462:	53 cf       	rjmp	.-346    	; 0x230a <main+0x12e>
			if(i== 0)
			{
				LCD_voidClearDisplay();
			}
		}
		for(s8 i=5;i>=0;i--)
    2464:	85 e0       	ldi	r24, 0x05	; 5
    2466:	8a af       	std	Y+58, r24	; 0x3a
    2468:	a9 c0       	rjmp	.+338    	; 0x25bc <main+0x3e0>
		{

			LCD_voidWriteString("Ready    ");
    246a:	87 e7       	ldi	r24, 0x77	; 119
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidGoTo_XY(1,0);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Remaining ");
    247a:	86 e6       	ldi	r24, 0x66	; 102
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidWrite_u32Number(i);
    2482:	8a ad       	ldd	r24, Y+58	; 0x3a
    2484:	99 27       	eor	r25, r25
    2486:	87 fd       	sbrc	r24, 7
    2488:	90 95       	com	r25
    248a:	a9 2f       	mov	r26, r25
    248c:	b9 2f       	mov	r27, r25
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_voidWrite_u32Number>
			LCD_voidWriteString(" Sec ");
    2496:	81 e7       	ldi	r24, 0x71	; 113
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			SEGMENT_voidPrintNumber(DIO_PORTA,COMMON_CATHODE,i);
    249e:	9a ad       	ldd	r25, Y+58	; 0x3a
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	49 2f       	mov	r20, r25
    24a6:	0e 94 23 10 	call	0x2046	; 0x2046 <SEGMENT_voidPrintNumber>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	66 e0       	ldi	r22, 0x06	; 6
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    24b4:	83 e0       	ldi	r24, 0x03	; 3
    24b6:	65 e0       	ldi	r22, 0x05	; 5
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	67 e0       	ldi	r22, 0x07	; 7
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	aa e7       	ldi	r26, 0x7A	; 122
    24ce:	b4 e4       	ldi	r27, 0x44	; 68
    24d0:	89 8f       	std	Y+25, r24	; 0x19
    24d2:	9a 8f       	std	Y+26, r25	; 0x1a
    24d4:	ab 8f       	std	Y+27, r26	; 0x1b
    24d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	69 8d       	ldd	r22, Y+25	; 0x19
    24da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a ef       	ldi	r20, 0xFA	; 250
    24e6:	54 e4       	ldi	r21, 0x44	; 68
    24e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8d 8b       	std	Y+21, r24	; 0x15
    24f2:	9e 8b       	std	Y+22, r25	; 0x16
    24f4:	af 8b       	std	Y+23, r26	; 0x17
    24f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <main+0x33e>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <main+0x3bc>
	else if (__tmp > 65535)
    251a:	6d 89       	ldd	r22, Y+21	; 0x15
    251c:	7e 89       	ldd	r23, Y+22	; 0x16
    251e:	8f 89       	ldd	r24, Y+23	; 0x17
    2520:	98 8d       	ldd	r25, Y+24	; 0x18
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <main+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 8d       	ldd	r22, Y+25	; 0x19
    2534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	0f c0       	rjmp	.+30     	; 0x257a <main+0x39e>
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9a 8b       	std	Y+18, r25	; 0x12
    2562:	89 8b       	std	Y+17, r24	; 0x11
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	9a 89       	ldd	r25, Y+18	; 0x12
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <main+0x38c>
    256c:	9a 8b       	std	Y+18, r25	; 0x12
    256e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <main+0x380>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <main+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	98 8b       	std	Y+16, r25	; 0x10
    259e:	8f 87       	std	Y+15, r24	; 0x0f
    25a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a2:	98 89       	ldd	r25, Y+16	; 0x10
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <main+0x3c8>
    25a8:	98 8b       	std	Y+16, r25	; 0x10
    25aa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			if(i== 0)
    25ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ae:	88 23       	and	r24, r24
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <main+0x3da>
			{
				LCD_voidClearDisplay();
    25b2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_voidClearDisplay>
			if(i== 0)
			{
				LCD_voidClearDisplay();
			}
		}
		for(s8 i=5;i>=0;i--)
    25b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    25b8:	81 50       	subi	r24, 0x01	; 1
    25ba:	8a af       	std	Y+58, r24	; 0x3a
    25bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    25be:	88 23       	and	r24, r24
    25c0:	0c f0       	brlt	.+2      	; 0x25c4 <main+0x3e8>
    25c2:	53 cf       	rjmp	.-346    	; 0x246a <main+0x28e>
			{
				LCD_voidClearDisplay();
			}

		}
		for(s8 i=6;i>=0;i--)
    25c4:	86 e0       	ldi	r24, 0x06	; 6
    25c6:	89 af       	std	Y+57, r24	; 0x39
    25c8:	a9 c0       	rjmp	.+338    	; 0x271c <main+0x540>
		{

			LCD_voidWriteString("Go    ");
    25ca:	81 e8       	ldi	r24, 0x81	; 129
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidGoTo_XY(1,0);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Remaining ");
    25da:	86 e6       	ldi	r24, 0x66	; 102
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			LCD_voidWrite_u32Number(i);
    25e2:	89 ad       	ldd	r24, Y+57	; 0x39
    25e4:	99 27       	eor	r25, r25
    25e6:	87 fd       	sbrc	r24, 7
    25e8:	90 95       	com	r25
    25ea:	a9 2f       	mov	r26, r25
    25ec:	b9 2f       	mov	r27, r25
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_voidWrite_u32Number>
			LCD_voidWriteString(" Sec ");
    25f6:	81 e7       	ldi	r24, 0x71	; 113
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
			SEGMENT_voidPrintNumber(DIO_PORTA,COMMON_CATHODE,i);
    25fe:	99 ad       	ldd	r25, Y+57	; 0x39
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	49 2f       	mov	r20, r25
    2606:	0e 94 23 10 	call	0x2046	; 0x2046 <SEGMENT_voidPrintNumber>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
    260a:	83 e0       	ldi	r24, 0x03	; 3
    260c:	67 e0       	ldi	r22, 0x07	; 7
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	65 e0       	ldi	r22, 0x05	; 5
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	66 e0       	ldi	r22, 0x06	; 6
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_voidSetPinValue>
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	aa e7       	ldi	r26, 0x7A	; 122
    262e:	b4 e4       	ldi	r27, 0x44	; 68
    2630:	8b 87       	std	Y+11, r24	; 0x0b
    2632:	9c 87       	std	Y+12, r25	; 0x0c
    2634:	ad 87       	std	Y+13, r26	; 0x0d
    2636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a ef       	ldi	r20, 0xFA	; 250
    2646:	54 e4       	ldi	r21, 0x44	; 68
    2648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8f 83       	std	Y+7, r24	; 0x07
    2652:	98 87       	std	Y+8, r25	; 0x08
    2654:	a9 87       	std	Y+9, r26	; 0x09
    2656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	2c f4       	brge	.+10     	; 0x267a <main+0x49e>
		__ticks = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <main+0x51c>
	else if (__tmp > 65535)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	4c f5       	brge	.+82     	; 0x26e4 <main+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	6b 85       	ldd	r22, Y+11	; 0x0b
    2694:	7c 85       	ldd	r23, Y+12	; 0x0c
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	9e 85       	ldd	r25, Y+14	; 0x0e
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <main+0x4fe>
    26bc:	88 ec       	ldi	r24, 0xC8	; 200
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <main+0x4ec>
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <main+0x4e0>
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <main+0x528>
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			if(i== 0)
    270c:	89 ad       	ldd	r24, Y+57	; 0x39
    270e:	88 23       	and	r24, r24
    2710:	11 f4       	brne	.+4      	; 0x2716 <main+0x53a>
			{
				LCD_voidClearDisplay();
    2712:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_voidClearDisplay>
			{
				LCD_voidClearDisplay();
			}

		}
		for(s8 i=6;i>=0;i--)
    2716:	89 ad       	ldd	r24, Y+57	; 0x39
    2718:	81 50       	subi	r24, 0x01	; 1
    271a:	89 af       	std	Y+57, r24	; 0x39
    271c:	89 ad       	ldd	r24, Y+57	; 0x39
    271e:	88 23       	and	r24, r24
    2720:	0c f0       	brlt	.+2      	; 0x2724 <main+0x548>
    2722:	53 cf       	rjmp	.-346    	; 0x25ca <main+0x3ee>
    2724:	ef cd       	rjmp	.-1058   	; 0x2304 <main+0x128>

00002726 <StartProgram>:
	}

}
/*                      Welcome Massage                       */
void StartProgram (void)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearDisplay();
    272e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_voidClearDisplay>
	LCD_voidGoTo_XY (0,1);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Welcome To MY");
    273a:	88 e8       	ldi	r24, 0x88	; 136
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Traffic System  ");
    274a:	87 e9       	ldi	r24, 0x97	; 151
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_voidWriteString>
}
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <__udivmodsi4>:
    2758:	a1 e2       	ldi	r26, 0x21	; 33
    275a:	1a 2e       	mov	r1, r26
    275c:	aa 1b       	sub	r26, r26
    275e:	bb 1b       	sub	r27, r27
    2760:	fd 01       	movw	r30, r26
    2762:	0d c0       	rjmp	.+26     	; 0x277e <__udivmodsi4_ep>

00002764 <__udivmodsi4_loop>:
    2764:	aa 1f       	adc	r26, r26
    2766:	bb 1f       	adc	r27, r27
    2768:	ee 1f       	adc	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	a2 17       	cp	r26, r18
    276e:	b3 07       	cpc	r27, r19
    2770:	e4 07       	cpc	r30, r20
    2772:	f5 07       	cpc	r31, r21
    2774:	20 f0       	brcs	.+8      	; 0x277e <__udivmodsi4_ep>
    2776:	a2 1b       	sub	r26, r18
    2778:	b3 0b       	sbc	r27, r19
    277a:	e4 0b       	sbc	r30, r20
    277c:	f5 0b       	sbc	r31, r21

0000277e <__udivmodsi4_ep>:
    277e:	66 1f       	adc	r22, r22
    2780:	77 1f       	adc	r23, r23
    2782:	88 1f       	adc	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	1a 94       	dec	r1
    2788:	69 f7       	brne	.-38     	; 0x2764 <__udivmodsi4_loop>
    278a:	60 95       	com	r22
    278c:	70 95       	com	r23
    278e:	80 95       	com	r24
    2790:	90 95       	com	r25
    2792:	9b 01       	movw	r18, r22
    2794:	ac 01       	movw	r20, r24
    2796:	bd 01       	movw	r22, r26
    2798:	cf 01       	movw	r24, r30
    279a:	08 95       	ret

0000279c <__prologue_saves__>:
    279c:	2f 92       	push	r2
    279e:	3f 92       	push	r3
    27a0:	4f 92       	push	r4
    27a2:	5f 92       	push	r5
    27a4:	6f 92       	push	r6
    27a6:	7f 92       	push	r7
    27a8:	8f 92       	push	r8
    27aa:	9f 92       	push	r9
    27ac:	af 92       	push	r10
    27ae:	bf 92       	push	r11
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	ca 1b       	sub	r28, r26
    27c6:	db 0b       	sbc	r29, r27
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	09 94       	ijmp

000027d4 <__epilogue_restores__>:
    27d4:	2a 88       	ldd	r2, Y+18	; 0x12
    27d6:	39 88       	ldd	r3, Y+17	; 0x11
    27d8:	48 88       	ldd	r4, Y+16	; 0x10
    27da:	5f 84       	ldd	r5, Y+15	; 0x0f
    27dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    27de:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27e6:	b9 84       	ldd	r11, Y+9	; 0x09
    27e8:	c8 84       	ldd	r12, Y+8	; 0x08
    27ea:	df 80       	ldd	r13, Y+7	; 0x07
    27ec:	ee 80       	ldd	r14, Y+6	; 0x06
    27ee:	fd 80       	ldd	r15, Y+5	; 0x05
    27f0:	0c 81       	ldd	r16, Y+4	; 0x04
    27f2:	1b 81       	ldd	r17, Y+3	; 0x03
    27f4:	aa 81       	ldd	r26, Y+2	; 0x02
    27f6:	b9 81       	ldd	r27, Y+1	; 0x01
    27f8:	ce 0f       	add	r28, r30
    27fa:	d1 1d       	adc	r29, r1
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	ed 01       	movw	r28, r26
    2808:	08 95       	ret

0000280a <_exit>:
    280a:	f8 94       	cli

0000280c <__stop_program>:
    280c:	ff cf       	rjmp	.-2      	; 0x280c <__stop_program>
